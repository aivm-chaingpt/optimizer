name: CI - Docker images

on:
  push:
    branches:
      - devops/pipeline

env:
  AWS_REGION: us-east-1
  REPOSITORY_OPTIMIZER: aivm/optimizer
  REPOSITORY_RUST_OPTIMIZER: aivm/rust-optimizer
  REPOSITORY_WORKSPACE_OPTIMIZER: aivm/workspace-optimizer
  TAG: 0.16.2

concurrency:
  group: build_images_development
  cancel-in-progress: true

jobs:
  build_x86_64:    
    name: Build Images - x86_64
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    environment: development
    timeout-minutes: 30 
    steps:
      - name: Configure AWS credentials using OIDC
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::205930620613:role/chaingpt_github_oidc_role
          aws-region: us-east-1
          role-session-name: chaingpt_github_oidc_role
          
      - name: Build - Git Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup docker buildx
        run: |
          docker buildx create --use --name multiarch --platform linux/amd64,linux/arm64
          
      - name: Build - Get ECR Repository optimizer
        run: |
          aws ecr describe-repositories --region $AWS_REGION --repository-names $REPOSITORY_OPTIMIZER > /dev/null 2>&1 || \
            aws ecr create-repository --region $AWS_REGION  --repository-name $REPOSITORY_OPTIMIZER

      - name: Build - Get ECR Repository rust optimizer
        run: |
          aws ecr describe-repositories --region $AWS_REGION --repository-names $REPOSITORY_RUST_OPTIMIZER > /dev/null 2>&1 || \
            aws ecr create-repository --region $AWS_REGION  --repository-name $REPOSITORY_RUST_OPTIMIZER

      - name: Build - Get ECR Repository workspace optimizer
        run: |
          aws ecr describe-repositories --region $AWS_REGION --repository-names $REPOSITORY_WORKSPACE_OPTIMIZER > /dev/null 2>&1 || \
            aws ecr create-repository --region $AWS_REGION  --repository-name $REPOSITORY_WORKSPACE_OPTIMIZER
            
      - name: Build - Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build - x86_64
        id: build-image-base-image-x86-64
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker buildx build --pull --platform linux/amd64 -t $ECR_REGISTRY/$REPOSITORY_OPTIMIZER:$TAG --load  .
          docker push $ECR_REGISTRY/$REPOSITORY_OPTIMIZER:$TAG
          echo Tagging and Pushing Image: "$ECR_REGISTRY/$REPOSITORY_RUST_OPTIMIZER"
          docker tag $ECR_REGISTRY/$REPOSITORY_OPTIMIZER:$TAG $ECR_REGISTRY/$REPOSITORY_RUST_OPTIMIZER:$TAG
          docker push $ECR_REGISTRY/$REPOSITORY_RUST_OPTIMIZER:$TAG
          echo Tagging and Pushing Image: "$ECR_REGISTRY/$REPOSITORY_WORKSPACE_OPTIMIZER"
          docker tag $ECR_REGISTRY/$REPOSITORY_OPTIMIZER:$TAG $ECR_REGISTRY/$REPOSITORY_WORKSPACE_OPTIMIZER:$TAG
          docker push $ECR_REGISTRY/$REPOSITORY_WORKSPACE_OPTIMIZER:$TAG

  # build_arm64:    
  #   name: Build Images - arm64
  #   runs-on: ubuntu-20.04
  #   permissions:
  #     id-token: write
  #     contents: read
  #   environment: development
  #   timeout-minutes: 30 
  #   steps:
  #     - name: Configure AWS credentials using OIDC
  #       id: aws-creds
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::205930620613:role/chaingpt_github_oidc_role
  #         aws-region: us-east-1
  #         role-session-name: chaingpt_github_oidc_role
          
  #     - name: Build - Git Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.inputs.branch }}

  #     - name: Setup docker buildx
  #       run: |
  #         docker buildx create --use --name multiarch --platform linux/amd64,linux/arm64
          
  #     - name: Build - Get ECR Repository optimizer
  #       run: |
  #         aws ecr describe-repositories --region $AWS_REGION --repository-names $REPOSITORY_OPTIMIZER > /dev/null 2>&1 || \
  #           aws ecr create-repository --region $AWS_REGION  --repository-name $REPOSITORY_OPTIMIZER

  #     - name: Build - Get ECR Repository rust optimizer
  #       run: |
  #         aws ecr describe-repositories --region $AWS_REGION --repository-names $REPOSITORY_RUST_OPTIMIZER > /dev/null 2>&1 || \
  #           aws ecr create-repository --region $AWS_REGION  --repository-name $REPOSITORY_RUST_OPTIMIZER

  #     - name: Build - Get ECR Repository workspace optimizer
  #       run: |
  #         aws ecr describe-repositories --region $AWS_REGION --repository-names $REPOSITORY_WORKSPACE_OPTIMIZER > /dev/null 2>&1 || \
  #           aws ecr create-repository --region $AWS_REGION  --repository-name $REPOSITORY_WORKSPACE_OPTIMIZER
            
  #     - name: Build - Login to ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build and Push - arm64
  #       id: build-image-base-image-arm64
  #       env:
  #         DOCKER_BUILDKIT: 1
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       run: |
  #         docker buildx build --pull --platform linux/arm64 -t $ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64:$TAG --target rust-optimizer .
  #         # docker tag $ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64:$TAG $ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64:$TAG
  #         echo Pushing "$ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64"
  #         docker push $ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64:$TAG
  #         # docker tag $ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64:$TAG $ECR_REGISTRY/$REPOSITORY_RUST_OPTIMIZER-arm64:$TAG
  #         # echo Pushing "$ECR_REGISTRY/$REPOSITORY_RUST_OPTIMIZER-arm64"
  #         # docker push $ECR_REGISTRY/$REPOSITORY_RUST_OPTIMIZER-arm64:$TAG
  #         # docker tag $ECR_REGISTRY/$REPOSITORY_OPTIMIZER-arm64:$TAG $ECR_REGISTRY/$REPOSITORY_WORKSPACE_OPTIMIZER-arm64:$TAG
  #         # echo Pushing "$ECR_REGISTRY/$REPOSITORY_WORKSPACE_OPTIMIZER-arm64"
  #         # docker push $ECR_REGISTRY/$REPOSITORY_WORKSPACE_OPTIMIZER-arm64:$TAG